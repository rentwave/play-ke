name: Deploy playke app to Prod using Argo

on:
  workflow_dispatch:
  push:
    branches:
      - master

concurrency:
  group: '${{ github.workflow }}-${{ github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  deploy-prod-mvpm-frontend:
    name: Build and Deploy to Prod Environment
    runs-on: ubuntu-22.04

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set Docker Tag
        id: set-docker-tag
        run: |
          GIT_HASH=$(git rev-parse --short "${GITHUB_SHA}")
          DOCKER_TAG="${GITHUB_REF##*/}-${GIT_HASH}"
          echo "docker_tag=${DOCKER_TAG}" >> $GITHUB_ENV

      - name: Set up QEMU for cross-platform builds
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          tags: osiru/playke:${{ env.docker_tag }}
          platforms: linux/amd64,linux/arm64
          build-args: |
            BASE_URL=https://play-gate.254.radio/api/post/

      - name: Deploy to Server via SSH for Production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.MVPM_SERVER_IP }}
          username: ${{ secrets.MVPM_SSH_USER }}
          port: 22
          key: ${{ secrets.MVPM_PASSWORD_SSH_KEY }}
          script_stop: true
          script: |
            cd /srv/apps/live/mvpm-ui/ || { echo "Failed to cd"; exit 1; }
            LATEST_TAG="${{ env.docker_tag }}"  # Use env variable
            echo "Updating .env file with FRONTEND_TAG=${LATEST_TAG}"
            
            if [[ -z "$LATEST_TAG" ]]; then
              echo "Error: LATEST_TAG is empty."
              exit 1
            fi
            
            # Create a new .env file
            echo "FRONTEND_TAG=${LATEST_TAG}" > .env
            
            # If you need to preserve other environment variables, consider reading the existing .env
            if [ -f .env ]; then
              # Preserve existing contents, if needed
              echo "FRONTEND_TAG=${LATEST_TAG}" >> .env
            else
              echo "FRONTEND_TAG=${LATEST_TAG}" > .env
            fi
            
            docker-compose pull || { echo "Failed to pull images"; exit 1; }
            docker-compose -f docker-compose-prod.yaml up -d --build || { echo "Failed to build and start containers"; exit 1; }

      - name: Restart Docker Service
        run: sudo systemctl restart docker
